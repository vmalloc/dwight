import copy
import os

from .exceptions import (
    CannotLoadConfiguration,
    InvalidConfiguration,
    NotRootException,
    UnknownConfigurationOptions,
    )
from .include import Include

_USER_CONFIG_FILE_PATH = os.path.expanduser("~/.dwightrc")

_USER_CONFIG_FILE_TEMPLATE = """# AUTOGENERATED DEFAULT CONFIG
# ROOT_IMAGE = "/some/path/here"
# INCLUDES = [Include("/dest/path/in/chroot", "/host/path")]
# ENVIRON = {}
# UID = None # None means taking the uid from SUDO_UID
# PWD = os.path.abspath(".")
"""

class DwightConfiguration(object):
    def __init__(self):
        super(DwightConfiguration, self).__init__()
        self._config = dict(
            ROOT_IMAGE = None,
            INCLUDES = [],
            ENVIRON = {},
            GID = None,
            UID = None,
            PWD = os.path.abspath("."),
            NUM_LOOP_DEVICES = None,
            )
        self._known_keys = set(self._config)
    def __getitem__(self, key):
        return self._config[key]
    def __setitem__(self, key, value):
        if key not in self._known_keys:
            raise UnknownConfigurationOptions("Unknown configuration option: {0!r}".format(key))
        self._config[key] = value

    def process_user_config_file(self, user_config_file_path=_USER_CONFIG_FILE_PATH):
        if not os.path.isfile(user_config_file_path):
            self._ensure_user_config_file(user_config_file_path)
        with open(user_config_file_path) as user_config_file:
            self.load_from_string(user_config_file)
    def _ensure_user_config_file(self, user_config_file_path):
        if not os.path.isdir(os.path.dirname(user_config_file_path)):
            os.makedirs(os.path.dirname(user_config_file_path))
        with open(user_config_file_path, "w") as user_config_file:
            user_config_file.write(_USER_CONFIG_FILE_TEMPLATE)
    def load_from_string(self, s):
        d = copy.deepcopy(self._config)
        try:
            exec(s, {"Include" : Include}, d)
        except Exception as e:
            raise CannotLoadConfiguration("Cannot load configuration ({0})".format(e))
        for key in list(d):
            if key.startswith("_") or not key[0].isupper():
                d.pop(key)
        self._check_unknown_parameters(d)
        self._config.update(d)
    def _check_unknown_parameters(self, d):
        unknown = set(d) - self._known_keys
        if unknown:
            raise UnknownConfigurationOptions("Unknown configuration options: {0}".format(", ".join(map(repr, unknown))))
    def check(self):
        if self._config.get("ROOT_IMAGE", None) is None:
            raise InvalidConfiguration("ROOT_IMAGE option is not set")

